//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using Dpws.Client;
using Dpws.Client.Discovery;
using Dpws.Client.Eventing;
using Ws.Services;
using Ws.Services.Utilities;
using Ws.Services.Binding;
using Ws.Services.Soap;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace tempuri.org
{
    
    
    public class IServiceClientProxy : DpwsClient
    {
        
        private IRequestChannel m_requestChannel = null;
        
        public IServiceClientProxy(Binding binding, ProtocolVersion version) : 
                base(binding, version)
        {

            // Set client endpoint address
            m_requestChannel = m_localBinding.CreateClientChannel(new ClientBindingContext(m_version));
        }
        
        public virtual LogInResponse LogIn(LogIn req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/LogIn";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            LogInDataContractSerializer reqDcs;
            reqDcs = new LogInDataContractSerializer("LogIn", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "LogIn";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            LogInResponseDataContractSerializer respDcs;
            respDcs = new LogInResponseDataContractSerializer("LogInResponse", "http://tempuri.org/");
            LogInResponse resp;
            resp = ((LogInResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual SendBarcodeImageResponse SendBarcodeImage(SendBarcodeImage req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/SendBarcodeImage";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            SendBarcodeImageDataContractSerializer reqDcs;
            reqDcs = new SendBarcodeImageDataContractSerializer("SendBarcodeImage", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "SendBarcodeImage";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            SendBarcodeImageResponseDataContractSerializer respDcs;
            respDcs = new SendBarcodeImageResponseDataContractSerializer("SendBarcodeImageResponse", "http://tempuri.org/");
            SendBarcodeImageResponse resp;
            resp = ((SendBarcodeImageResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual GetBookInformationsResponse GetBookInformations(GetBookInformations req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/GetBookInformations";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            GetBookInformationsDataContractSerializer reqDcs;
            reqDcs = new GetBookInformationsDataContractSerializer("GetBookInformations", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "GetBookInformations";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            GetBookInformationsResponseDataContractSerializer respDcs;
            respDcs = new GetBookInformationsResponseDataContractSerializer("GetBookInformationsResponse", "http://tempuri.org/");
            GetBookInformationsResponse resp;
            resp = ((GetBookInformationsResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual BorrowResponse Borrow(Borrow req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/Borrow";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            BorrowDataContractSerializer reqDcs;
            reqDcs = new BorrowDataContractSerializer("Borrow", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "Borrow";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            BorrowResponseDataContractSerializer respDcs;
            respDcs = new BorrowResponseDataContractSerializer("BorrowResponse", "http://tempuri.org/");
            BorrowResponse resp;
            resp = ((BorrowResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual GiveBackBookResponse GiveBackBook(GiveBackBook req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/GiveBackBook";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            GiveBackBookDataContractSerializer reqDcs;
            reqDcs = new GiveBackBookDataContractSerializer("GiveBackBook", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "GiveBackBook";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            GiveBackBookResponseDataContractSerializer respDcs;
            respDcs = new GiveBackBookResponseDataContractSerializer("GiveBackBookResponse", "http://tempuri.org/");
            GiveBackBookResponse resp;
            resp = ((GiveBackBookResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual GetLoanStateResponse GetLoanState(GetLoanState req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/GetLoanState";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            GetLoanStateDataContractSerializer reqDcs;
            reqDcs = new GetLoanStateDataContractSerializer("GetLoanState", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "GetLoanState";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            GetLoanStateResponseDataContractSerializer respDcs;
            respDcs = new GetLoanStateResponseDataContractSerializer("GetLoanStateResponse", "http://tempuri.org/");
            GetLoanStateResponse resp;
            resp = ((GetLoanStateResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual RenewResponse Renew(Renew req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/IService/Renew";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            RenewDataContractSerializer reqDcs;
            reqDcs = new RenewDataContractSerializer("Renew", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "Renew";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            RenewResponseDataContractSerializer respDcs;
            respDcs = new RenewResponseDataContractSerializer("RenewResponse", "http://tempuri.org/");
            RenewResponse resp;
            resp = ((RenewResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
    }
}
