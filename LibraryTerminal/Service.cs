//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace tempuri.org
{


    [DataContract(Namespace = "http://tempuri.org/")]
    public class LogIn
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public string card_number;
    }

    public class LogInDataContractSerializer : DataContractSerializer
    {

        public LogInDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public LogInDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            LogIn LogInField = null;
            if (IsParentStartElement(reader, false, true))
            {
                LogInField = new LogIn();
                reader.Read();
                if (IsChildStartElement(reader, "card_number", true, false))
                {
                    reader.Read();
                    LogInField.card_number = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return LogInField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            LogIn LogInField = ((LogIn)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "card_number", true, false, LogInField.card_number))
                {
                    writer.WriteString(LogInField.card_number);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class LogInResponse
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.datacontract.org.UserCompositeType LogInResult;
    }

    public class LogInResponseDataContractSerializer : DataContractSerializer
    {

        public LogInResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public LogInResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            LogInResponse LogInResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                LogInResponseField = new LogInResponse();
                reader.Read();
                schemas.datacontract.org.UserCompositeTypeDataContractSerializer LogInResultDCS = new schemas.datacontract.org.UserCompositeTypeDataContractSerializer("LogInResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                LogInResultDCS.BodyParts = this.BodyParts;
                LogInResponseField.LogInResult = ((schemas.datacontract.org.UserCompositeType)(LogInResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return LogInResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            LogInResponse LogInResponseField = ((LogInResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.UserCompositeTypeDataContractSerializer LogInResultDCS = new schemas.datacontract.org.UserCompositeTypeDataContractSerializer("LogInResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                LogInResultDCS.BodyParts = this.BodyParts;
                LogInResultDCS.WriteObject(writer, LogInResponseField.LogInResult);
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class SendBarcodeImage
    {
    }

    public class SendBarcodeImageDataContractSerializer : DataContractSerializer
    {

        public SendBarcodeImageDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public SendBarcodeImageDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            SendBarcodeImage SendBarcodeImageField = null;
            if (IsParentStartElement(reader, false, true))
            {
                SendBarcodeImageField = new SendBarcodeImage();
                reader.Read();
                reader.ReadEndElement();
            }
            return SendBarcodeImageField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            SendBarcodeImage SendBarcodeImageField = ((SendBarcodeImage)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class SendBarcodeImageResponse
    {

        [DataMember(Order = 0, IsRequired = false)]
        public short SendBarcodeImageResult;
    }

    public class SendBarcodeImageResponseDataContractSerializer : DataContractSerializer
    {

        public SendBarcodeImageResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public SendBarcodeImageResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            SendBarcodeImageResponse SendBarcodeImageResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                SendBarcodeImageResponseField = new SendBarcodeImageResponse();
                reader.Read();
                if (IsChildStartElement(reader, "SendBarcodeImageResult", false, false))
                {
                    reader.Read();
                    SendBarcodeImageResponseField.SendBarcodeImageResult = XmlConvert.ToInt16(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return SendBarcodeImageResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            SendBarcodeImageResponse SendBarcodeImageResponseField = ((SendBarcodeImageResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "SendBarcodeImageResult", false, false, SendBarcodeImageResponseField.SendBarcodeImageResult))
                {
                    writer.WriteString(XmlConvert.ToString(SendBarcodeImageResponseField.SendBarcodeImageResult));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GetBookInformations
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public string barcode;
    }

    public class GetBookInformationsDataContractSerializer : DataContractSerializer
    {

        public GetBookInformationsDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GetBookInformationsDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GetBookInformations GetBookInformationsField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetBookInformationsField = new GetBookInformations();
                reader.Read();
                if (IsChildStartElement(reader, "barcode", true, false))
                {
                    reader.Read();
                    GetBookInformationsField.barcode = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return GetBookInformationsField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetBookInformations GetBookInformationsField = ((GetBookInformations)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "barcode", true, false, GetBookInformationsField.barcode))
                {
                    writer.WriteString(GetBookInformationsField.barcode);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GetBookInformationsResponse
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.datacontract.org.BookCompositeType GetBookInformationsResult;
    }

    public class GetBookInformationsResponseDataContractSerializer : DataContractSerializer
    {

        public GetBookInformationsResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GetBookInformationsResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GetBookInformationsResponse GetBookInformationsResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetBookInformationsResponseField = new GetBookInformationsResponse();
                reader.Read();
                schemas.datacontract.org.BookCompositeTypeDataContractSerializer GetBookInformationsResultDCS = new schemas.datacontract.org.BookCompositeTypeDataContractSerializer("GetBookInformationsResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                GetBookInformationsResultDCS.BodyParts = this.BodyParts;
                GetBookInformationsResponseField.GetBookInformationsResult = ((schemas.datacontract.org.BookCompositeType)(GetBookInformationsResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return GetBookInformationsResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetBookInformationsResponse GetBookInformationsResponseField = ((GetBookInformationsResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.BookCompositeTypeDataContractSerializer GetBookInformationsResultDCS = new schemas.datacontract.org.BookCompositeTypeDataContractSerializer("GetBookInformationsResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                GetBookInformationsResultDCS.BodyParts = this.BodyParts;
                GetBookInformationsResultDCS.WriteObject(writer, GetBookInformationsResponseField.GetBookInformationsResult);
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class Borrow
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int userID;

        [DataMember(Order = 1, IsRequired = false)]
        public int bookID;
    }

    public class BorrowDataContractSerializer : DataContractSerializer
    {

        public BorrowDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public BorrowDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            Borrow BorrowField = null;
            if (IsParentStartElement(reader, false, true))
            {
                BorrowField = new Borrow();
                reader.Read();
                if (IsChildStartElement(reader, "userID", false, false))
                {
                    reader.Read();
                    BorrowField.userID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "bookID", false, false))
                {
                    reader.Read();
                    BorrowField.bookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return BorrowField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            Borrow BorrowField = ((Borrow)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "userID", false, false, BorrowField.userID))
                {
                    writer.WriteString(XmlConvert.ToString(BorrowField.userID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "bookID", false, false, BorrowField.bookID))
                {
                    writer.WriteString(XmlConvert.ToString(BorrowField.bookID));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class BorrowResponse
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.datacontract.org.LoanCompositeType BorrowResult;
    }

    public class BorrowResponseDataContractSerializer : DataContractSerializer
    {

        public BorrowResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public BorrowResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            BorrowResponse BorrowResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                BorrowResponseField = new BorrowResponse();
                reader.Read();
                schemas.datacontract.org.LoanCompositeTypeDataContractSerializer BorrowResultDCS = new schemas.datacontract.org.LoanCompositeTypeDataContractSerializer("BorrowResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                BorrowResultDCS.BodyParts = this.BodyParts;
                BorrowResponseField.BorrowResult = ((schemas.datacontract.org.LoanCompositeType)(BorrowResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return BorrowResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            BorrowResponse BorrowResponseField = ((BorrowResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.LoanCompositeTypeDataContractSerializer BorrowResultDCS = new schemas.datacontract.org.LoanCompositeTypeDataContractSerializer("BorrowResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                BorrowResultDCS.BodyParts = this.BodyParts;
                BorrowResultDCS.WriteObject(writer, BorrowResponseField.BorrowResult);
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GiveBackBook
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int userID;

        [DataMember(Order = 1, IsRequired = false)]
        public int bookID;
    }

    public class GiveBackBookDataContractSerializer : DataContractSerializer
    {

        public GiveBackBookDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GiveBackBookDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GiveBackBook GiveBackBookField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GiveBackBookField = new GiveBackBook();
                reader.Read();
                if (IsChildStartElement(reader, "userID", false, false))
                {
                    reader.Read();
                    GiveBackBookField.userID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "bookID", false, false))
                {
                    reader.Read();
                    GiveBackBookField.bookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return GiveBackBookField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GiveBackBook GiveBackBookField = ((GiveBackBook)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "userID", false, false, GiveBackBookField.userID))
                {
                    writer.WriteString(XmlConvert.ToString(GiveBackBookField.userID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "bookID", false, false, GiveBackBookField.bookID))
                {
                    writer.WriteString(XmlConvert.ToString(GiveBackBookField.bookID));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GiveBackBookResponse
    {

        [DataMember(Order = 0, IsRequired = false)]
        public bool GiveBackBookResult;
    }

    public class GiveBackBookResponseDataContractSerializer : DataContractSerializer
    {

        public GiveBackBookResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GiveBackBookResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GiveBackBookResponse GiveBackBookResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GiveBackBookResponseField = new GiveBackBookResponse();
                reader.Read();
                if (IsChildStartElement(reader, "GiveBackBookResult", false, false))
                {
                    reader.Read();
                    GiveBackBookResponseField.GiveBackBookResult = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return GiveBackBookResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GiveBackBookResponse GiveBackBookResponseField = ((GiveBackBookResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "GiveBackBookResult", false, false, GiveBackBookResponseField.GiveBackBookResult))
                {
                    writer.WriteString(XmlConvert.ToString(GiveBackBookResponseField.GiveBackBookResult));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GetLoanState
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int userID;

        [DataMember(Order = 1, IsRequired = false)]
        public int bookID;

        [DataMember(Order = 2, IsRequired = false)]
        public bool returned;
    }

    public class GetLoanStateDataContractSerializer : DataContractSerializer
    {

        public GetLoanStateDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GetLoanStateDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GetLoanState GetLoanStateField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetLoanStateField = new GetLoanState();
                reader.Read();
                if (IsChildStartElement(reader, "userID", false, false))
                {
                    reader.Read();
                    GetLoanStateField.userID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "bookID", false, false))
                {
                    reader.Read();
                    GetLoanStateField.bookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "returned", false, false))
                {
                    reader.Read();
                    GetLoanStateField.returned = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return GetLoanStateField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetLoanState GetLoanStateField = ((GetLoanState)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "userID", false, false, GetLoanStateField.userID))
                {
                    writer.WriteString(XmlConvert.ToString(GetLoanStateField.userID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "bookID", false, false, GetLoanStateField.bookID))
                {
                    writer.WriteString(XmlConvert.ToString(GetLoanStateField.bookID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "returned", false, false, GetLoanStateField.returned))
                {
                    writer.WriteString(XmlConvert.ToString(GetLoanStateField.returned));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class GetLoanStateResponse
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.datacontract.org.ArrayOfLoanStateCompositeType GetLoanStateResult;
    }

    public class GetLoanStateResponseDataContractSerializer : DataContractSerializer
    {

        public GetLoanStateResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public GetLoanStateResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            GetLoanStateResponse GetLoanStateResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                GetLoanStateResponseField = new GetLoanStateResponse();
                reader.Read();
                schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer GetLoanStateResultDCS = new schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer("GetLoanStateResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                GetLoanStateResultDCS.BodyParts = this.BodyParts;
                GetLoanStateResponseField.GetLoanStateResult = ((schemas.datacontract.org.ArrayOfLoanStateCompositeType)(GetLoanStateResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return GetLoanStateResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            GetLoanStateResponse GetLoanStateResponseField = ((GetLoanStateResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer GetLoanStateResultDCS = new schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer("GetLoanStateResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                GetLoanStateResultDCS.BodyParts = this.BodyParts;
                GetLoanStateResultDCS.WriteObject(writer, GetLoanStateResponseField.GetLoanStateResult);
                writer.WriteEndElement();
            }
            return;
        }
    }


    //[DataContract(Namespace = "http://tempuri.org/")]
    //public class GetLoanState
    //{

    //    [DataMember(Order = 0, IsRequired = false)]
    //    public int userID;
    //}

    //public class GetLoanStateDataContractSerializer : DataContractSerializer
    //{

    //    public GetLoanStateDataContractSerializer(string rootName, string rootNameSpace) :
    //        base(rootName, rootNameSpace)
    //    {
    //    }

    //    public GetLoanStateDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
    //        base(rootName, rootNameSpace, localNameSpace)
    //    {
    //    }

    //    public override object ReadObject(XmlReader reader)
    //    {
    //        GetLoanState GetLoanStateField = null;
    //        if (IsParentStartElement(reader, false, true))
    //        {
    //            GetLoanStateField = new GetLoanState();
    //            reader.Read();
    //            if (IsChildStartElement(reader, "userID", false, false))
    //            {
    //                reader.Read();
    //                GetLoanStateField.userID = XmlConvert.ToInt32(reader.ReadString());
    //                reader.ReadEndElement();
    //            }
    //            reader.ReadEndElement();
    //        }
    //        return GetLoanStateField;
    //    }

    //    public override void WriteObject(XmlWriter writer, object graph)
    //    {
    //        GetLoanState GetLoanStateField = ((GetLoanState)(graph));
    //        if (WriteParentElement(writer, true, true, graph))
    //        {
    //            if (WriteChildElement(writer, "userID", false, false, GetLoanStateField.userID))
    //            {
    //                writer.WriteString(XmlConvert.ToString(GetLoanStateField.userID));
    //                writer.WriteEndElement();
    //            }
    //            writer.WriteEndElement();
    //        }
    //        return;
    //    }
    //}

    //[DataContract(Namespace = "http://tempuri.org/")]
    //public class GetLoanStateResponse
    //{

    //    [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
    //    public schemas.datacontract.org.ArrayOfLoanStateCompositeType GetLoanStateResult;
    //}

    //public class GetLoanStateResponseDataContractSerializer : DataContractSerializer
    //{

    //    public GetLoanStateResponseDataContractSerializer(string rootName, string rootNameSpace) :
    //        base(rootName, rootNameSpace)
    //    {
    //    }

    //    public GetLoanStateResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
    //        base(rootName, rootNameSpace, localNameSpace)
    //    {
    //    }

    //    public override object ReadObject(XmlReader reader)
    //    {
    //        GetLoanStateResponse GetLoanStateResponseField = null;
    //        if (IsParentStartElement(reader, false, true))
    //        {
    //            GetLoanStateResponseField = new GetLoanStateResponse();
    //            reader.Read();
    //            schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer GetLoanStateResultDCS = new schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer("GetLoanStateResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
    //            GetLoanStateResultDCS.BodyParts = this.BodyParts;
    //            GetLoanStateResponseField.GetLoanStateResult = ((schemas.datacontract.org.ArrayOfLoanStateCompositeType)(GetLoanStateResultDCS.ReadObject(reader)));
    //            reader.ReadEndElement();
    //        }
    //        return GetLoanStateResponseField;
    //    }

    //    public override void WriteObject(XmlWriter writer, object graph)
    //    {
    //        GetLoanStateResponse GetLoanStateResponseField = ((GetLoanStateResponse)(graph));
    //        if (WriteParentElement(writer, true, true, graph))
    //        {
    //            schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer GetLoanStateResultDCS = new schemas.datacontract.org.ArrayOfLoanStateCompositeTypeDataContractSerializer("GetLoanStateResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
    //            GetLoanStateResultDCS.BodyParts = this.BodyParts;
    //            GetLoanStateResultDCS.WriteObject(writer, GetLoanStateResponseField.GetLoanStateResult);
    //            writer.WriteEndElement();
    //        }
    //        return;
    //    }
    //}

    [DataContract(Namespace = "http://tempuri.org/")]
    public class Renew
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int userID;

        [DataMember(Order = 1, IsRequired = false)]
        public int bookID;
    }

    public class RenewDataContractSerializer : DataContractSerializer
    {

        public RenewDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public RenewDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            Renew RenewField = null;
            if (IsParentStartElement(reader, false, true))
            {
                RenewField = new Renew();
                reader.Read();
                if (IsChildStartElement(reader, "userID", false, false))
                {
                    reader.Read();
                    RenewField.userID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "bookID", false, false))
                {
                    reader.Read();
                    RenewField.bookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return RenewField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            Renew RenewField = ((Renew)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "userID", false, false, RenewField.userID))
                {
                    writer.WriteString(XmlConvert.ToString(RenewField.userID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "bookID", false, false, RenewField.bookID))
                {
                    writer.WriteString(XmlConvert.ToString(RenewField.bookID));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://tempuri.org/")]
    public class RenewResponse
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.datacontract.org.LoanCompositeType RenewResult;
    }

    public class RenewResponseDataContractSerializer : DataContractSerializer
    {

        public RenewResponseDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public RenewResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            RenewResponse RenewResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                RenewResponseField = new RenewResponse();
                reader.Read();
                schemas.datacontract.org.LoanCompositeTypeDataContractSerializer RenewResultDCS = new schemas.datacontract.org.LoanCompositeTypeDataContractSerializer("RenewResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                RenewResultDCS.BodyParts = this.BodyParts;
                RenewResponseField.RenewResult = ((schemas.datacontract.org.LoanCompositeType)(RenewResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return RenewResponseField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            RenewResponse RenewResponseField = ((RenewResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.LoanCompositeTypeDataContractSerializer RenewResultDCS = new schemas.datacontract.org.LoanCompositeTypeDataContractSerializer("RenewResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/");
                RenewResultDCS.BodyParts = this.BodyParts;
                RenewResultDCS.WriteObject(writer, RenewResponseField.RenewResult);
                writer.WriteEndElement();
            }
            return;
        }
    }

    [ServiceContract(Namespace = "http://tempuri.org/")]
    [PolicyAssertion(Namespace = "http://www.w3.org/2006/05/addressing/wsdl", Name = "UsingAddressing", PolicyID = "WS2007HttpBinding_IService_policy")]
    public interface IIService
    {

        [OperationContract(Action = "http://tempuri.org/IService/LogIn")]
        LogInResponse LogIn(LogIn req);

        [OperationContract(Action = "http://tempuri.org/IService/SendBarcodeImage")]
        SendBarcodeImageResponse SendBarcodeImage(SendBarcodeImage req);

        [OperationContract(Action = "http://tempuri.org/IService/GetBookInformations")]
        GetBookInformationsResponse GetBookInformations(GetBookInformations req);

        [OperationContract(Action = "http://tempuri.org/IService/Borrow")]
        BorrowResponse Borrow(Borrow req);

        [OperationContract(Action = "http://tempuri.org/IService/GiveBackBook")]
        GiveBackBookResponse GiveBackBook(GiveBackBook req);

        [OperationContract(Action = "http://tempuri.org/IService/GetLoanState")]
        GetLoanStateResponse GetLoanState(GetLoanState req);

        [OperationContract(Action = "http://tempuri.org/IService/Renew")]
        RenewResponse Renew(Renew req);
    }
}
namespace schemas.datacontract.org
{


    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/")]
    public class UserCompositeType
    {

        [DataMember(Order = 0, IsRequired = false)]
        public bool Delay;

        [DataMember(Order = 1, IsNillable = true, IsRequired = false)]
        public string FirstName;

        [DataMember(Order = 2, IsRequired = false)]
        public int ID;

        [DataMember(Order = 3, IsNillable = true, IsRequired = false)]
        public string LastName;

        [DataMember(Order = 4, IsRequired = false)]
        public bool MaxLoansReached;
    }

    public class UserCompositeTypeDataContractSerializer : DataContractSerializer
    {

        public UserCompositeTypeDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public UserCompositeTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            UserCompositeType UserCompositeTypeField = null;
            if (IsParentStartElement(reader, false, true))
            {
                UserCompositeTypeField = new UserCompositeType();
                reader.Read();
                if (IsChildStartElement(reader, "Delay", false, false))
                {
                    reader.Read();
                    UserCompositeTypeField.Delay = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "FirstName", true, false))
                {
                    reader.Read();
                    UserCompositeTypeField.FirstName = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "ID", false, false))
                {
                    reader.Read();
                    UserCompositeTypeField.ID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "LastName", true, false))
                {
                    reader.Read();
                    UserCompositeTypeField.LastName = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "MaxLoansReached", false, false))
                {
                    reader.Read();
                    UserCompositeTypeField.MaxLoansReached = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return UserCompositeTypeField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            UserCompositeType UserCompositeTypeField = ((UserCompositeType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "Delay", false, false, UserCompositeTypeField.Delay))
                {
                    writer.WriteString(XmlConvert.ToString(UserCompositeTypeField.Delay));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "FirstName", true, false, UserCompositeTypeField.FirstName))
                {
                    writer.WriteString(UserCompositeTypeField.FirstName);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "ID", false, false, UserCompositeTypeField.ID))
                {
                    writer.WriteString(XmlConvert.ToString(UserCompositeTypeField.ID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "LastName", true, false, UserCompositeTypeField.LastName))
                {
                    writer.WriteString(UserCompositeTypeField.LastName);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "MaxLoansReached", false, false, UserCompositeTypeField.MaxLoansReached))
                {
                    writer.WriteString(XmlConvert.ToString(UserCompositeTypeField.MaxLoansReached));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/")]
    public class BookCompositeType
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public schemas.microsoft.com.Serialization.Arrays.ArrayOfstring Authors;

        [DataMember(Order = 1, IsNillable = true, IsRequired = false)]
        public string Description;

        [DataMember(Order = 2, IsRequired = false)]
        public int ID;

        [DataMember(Order = 3, IsNillable = true, IsRequired = false)]
        public string ISBN;

        [DataMember(Order = 4, IsNillable = true, IsRequired = false)]
        public string Language;

        [DataMember(Order = 5, IsRequired = false)]
        public System.DateTime PublicationDate;

        [DataMember(Order = 6, IsNillable = true, IsRequired = false)]
        public string Publisher;

        [DataMember(Order = 7, IsNillable = true, IsRequired = false)]
        public schemas.microsoft.com.Serialization.Arrays.ArrayOfstring Subjects;

        [DataMember(Order = 8, IsNillable = true, IsRequired = false)]
        public string Title;
    }

    public class BookCompositeTypeDataContractSerializer : DataContractSerializer
    {

        public BookCompositeTypeDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public BookCompositeTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            BookCompositeType BookCompositeTypeField = null;
            if (IsParentStartElement(reader, false, true))
            {
                BookCompositeTypeField = new BookCompositeType();
                reader.Read();
                schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer AuthorsDCS = new schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer("Authors", "http://schemas.datacontract.org/2004/07/", "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                AuthorsDCS.BodyParts = this.BodyParts;
                BookCompositeTypeField.Authors = ((schemas.microsoft.com.Serialization.Arrays.ArrayOfstring)(AuthorsDCS.ReadObject(reader)));
                if (IsChildStartElement(reader, "Description", true, false))
                {
                    reader.Read();
                    BookCompositeTypeField.Description = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "ID", false, false))
                {
                    reader.Read();
                    BookCompositeTypeField.ID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "ISBN", true, false))
                {
                    reader.Read();
                    BookCompositeTypeField.ISBN = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Language", true, false))
                {
                    reader.Read();
                    BookCompositeTypeField.Language = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "PublicationDate", false, false))
                {
                    reader.Read();
                    //BookCompositeTypeField.PublicationDate = XmlConvert.ToDateTime(reader.ReadString());
                    BookCompositeTypeField.PublicationDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Publisher", true, false))
                {
                    reader.Read();
                    BookCompositeTypeField.Publisher = reader.ReadString();
                    reader.ReadEndElement();
                }
                schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer SubjectsDCS = new schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer("Subjects", "http://schemas.datacontract.org/2004/07/", "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                SubjectsDCS.BodyParts = this.BodyParts;
                BookCompositeTypeField.Subjects = ((schemas.microsoft.com.Serialization.Arrays.ArrayOfstring)(SubjectsDCS.ReadObject(reader)));
                if (IsChildStartElement(reader, "Title", true, false))
                {
                    reader.Read();
                    BookCompositeTypeField.Title = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return BookCompositeTypeField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            BookCompositeType BookCompositeTypeField = ((BookCompositeType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer AuthorsDCS = new schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer("Authors", "http://schemas.datacontract.org/2004/07/", "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                AuthorsDCS.BodyParts = this.BodyParts;
                AuthorsDCS.WriteObject(writer, BookCompositeTypeField.Authors);
                if (WriteChildElement(writer, "Description", true, false, BookCompositeTypeField.Description))
                {
                    writer.WriteString(BookCompositeTypeField.Description);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "ID", false, false, BookCompositeTypeField.ID))
                {
                    writer.WriteString(XmlConvert.ToString(BookCompositeTypeField.ID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "ISBN", true, false, BookCompositeTypeField.ISBN))
                {
                    writer.WriteString(BookCompositeTypeField.ISBN);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Language", true, false, BookCompositeTypeField.Language))
                {
                    writer.WriteString(BookCompositeTypeField.Language);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "PublicationDate", false, false, BookCompositeTypeField.PublicationDate))
                {
                    writer.WriteString(XmlConvert.ToString(BookCompositeTypeField.PublicationDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Publisher", true, false, BookCompositeTypeField.Publisher))
                {
                    writer.WriteString(BookCompositeTypeField.Publisher);
                    writer.WriteEndElement();
                }
                schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer SubjectsDCS = new schemas.microsoft.com.Serialization.Arrays.ArrayOfstringDataContractSerializer("Subjects", "http://schemas.datacontract.org/2004/07/", "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                SubjectsDCS.BodyParts = this.BodyParts;
                SubjectsDCS.WriteObject(writer, BookCompositeTypeField.Subjects);
                if (WriteChildElement(writer, "Title", true, false, BookCompositeTypeField.Title))
                {
                    writer.WriteString(BookCompositeTypeField.Title);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/")]
    public class LoanCompositeType
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int BookID;

        [DataMember(Order = 1, IsNillable = true, IsRequired = false)]
        public System.DateTime DeliveryDate;

        [DataMember(Order = 2, IsRequired = false)]
        public System.DateTime ExpirationDate;

        [DataMember(Order = 3, IsRequired = false)]
        public System.DateTime StartDate;

        [DataMember(Order = 4, IsRequired = false)]
        public int UserID;
    }

    public class LoanCompositeTypeDataContractSerializer : DataContractSerializer
    {

        public LoanCompositeTypeDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public LoanCompositeTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            LoanCompositeType LoanCompositeTypeField = null;
            if (IsParentStartElement(reader, false, true))
            {
                LoanCompositeTypeField = new LoanCompositeType();
                reader.Read();
                if (IsChildStartElement(reader, "BookID", false, false))
                {
                    reader.Read();
                    LoanCompositeTypeField.BookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "DeliveryDate", true, false))
                {
                    reader.Read();
                    //LoanCompositeTypeField.DeliveryDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanCompositeTypeField.DeliveryDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "ExpirationDate", false, false))
                {
                    reader.Read();
                    //LoanCompositeTypeField.ExpirationDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanCompositeTypeField.ExpirationDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "StartDate", false, false))
                {
                    reader.Read();
                    //LoanCompositeTypeField.StartDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanCompositeTypeField.StartDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "UserID", false, false))
                {
                    reader.Read();
                    LoanCompositeTypeField.UserID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return LoanCompositeTypeField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            LoanCompositeType LoanCompositeTypeField = ((LoanCompositeType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "BookID", false, false, LoanCompositeTypeField.BookID))
                {
                    writer.WriteString(XmlConvert.ToString(LoanCompositeTypeField.BookID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "DeliveryDate", false, false, LoanCompositeTypeField.DeliveryDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanCompositeTypeField.DeliveryDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "ExpirationDate", false, false, LoanCompositeTypeField.ExpirationDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanCompositeTypeField.ExpirationDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "StartDate", false, false, LoanCompositeTypeField.StartDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanCompositeTypeField.StartDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "UserID", false, false, LoanCompositeTypeField.UserID))
                {
                    writer.WriteString(XmlConvert.ToString(LoanCompositeTypeField.UserID));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/")]
    public class LoanStateCompositeType
    {

        [DataMember(Order = 0, IsRequired = false)]
        public int BookID;

        [DataMember(Order = 1, IsNillable = true, IsRequired = false)]
        public string Description;

        [DataMember(Order = 2, IsNillable = true, IsRequired = false)]
        public string ISBN;

        [DataMember(Order = 3, IsNillable = true, IsRequired = false)]
        public string Language;

        [DataMember(Order = 4, IsRequired = false)]
        public System.DateTime LoanExpirationDate;

        [DataMember(Order = 5, IsRequired = false)]
        public System.DateTime LoanStartDate;

        [DataMember(Order = 6, IsRequired = false)]
        public System.DateTime PublicationDate;

        [DataMember(Order = 7, IsNillable = true, IsRequired = false)]
        public string Publisher;

        [DataMember(Order = 8, IsNillable = true, IsRequired = false)]
        public string Title;
    }

    public class LoanStateCompositeTypeDataContractSerializer : DataContractSerializer
    {

        public LoanStateCompositeTypeDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public LoanStateCompositeTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            LoanStateCompositeType LoanStateCompositeTypeField = null;
            if (IsParentStartElement(reader, false, true))
            {
                LoanStateCompositeTypeField = new LoanStateCompositeType();
                reader.Read();
                if (IsChildStartElement(reader, "BookID", false, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.BookID = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Description", true, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.Description = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "ISBN", true, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.ISBN = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Language", true, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.Language = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "LoanExpirationDate", false, false))
                {
                    reader.Read();
                    // LoanStateCompositeTypeField.LoanExpirationDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanStateCompositeTypeField.LoanExpirationDate = LibraryTerminal.Utils.Parse(reader.ReadString());

                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "LoanStartDate", false, false))
                {
                    reader.Read();
                    //  LoanStateCompositeTypeField.LoanStartDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanStateCompositeTypeField.LoanStartDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "PublicationDate", false, false))
                {
                    reader.Read();
                   // LoanStateCompositeTypeField.PublicationDate = XmlConvert.ToDateTime(reader.ReadString());
                    LoanStateCompositeTypeField.PublicationDate = LibraryTerminal.Utils.Parse(reader.ReadString());
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Publisher", true, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.Publisher = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "Title", true, false))
                {
                    reader.Read();
                    LoanStateCompositeTypeField.Title = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return LoanStateCompositeTypeField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            LoanStateCompositeType LoanStateCompositeTypeField = ((LoanStateCompositeType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "BookID", false, false, LoanStateCompositeTypeField.BookID))
                {
                    writer.WriteString(XmlConvert.ToString(LoanStateCompositeTypeField.BookID));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Description", true, false, LoanStateCompositeTypeField.Description))
                {
                    writer.WriteString(LoanStateCompositeTypeField.Description);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "ISBN", true, false, LoanStateCompositeTypeField.ISBN))
                {
                    writer.WriteString(LoanStateCompositeTypeField.ISBN);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Language", true, false, LoanStateCompositeTypeField.Language))
                {
                    writer.WriteString(LoanStateCompositeTypeField.Language);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "LoanExpirationDate", false, false, LoanStateCompositeTypeField.LoanExpirationDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanStateCompositeTypeField.LoanExpirationDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "LoanStartDate", false, false, LoanStateCompositeTypeField.LoanStartDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanStateCompositeTypeField.LoanStartDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "PublicationDate", false, false, LoanStateCompositeTypeField.PublicationDate))
                {
                    writer.WriteString(XmlConvert.ToString(LoanStateCompositeTypeField.PublicationDate));
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Publisher", true, false, LoanStateCompositeTypeField.Publisher))
                {
                    writer.WriteString(LoanStateCompositeTypeField.Publisher);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "Title", true, false, LoanStateCompositeTypeField.Title))
                {
                    writer.WriteString(LoanStateCompositeTypeField.Title);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/")]
    public class ArrayOfLoanStateCompositeType
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public LoanStateCompositeType[] LoanStateCompositeType;
    }

    public class ArrayOfLoanStateCompositeTypeDataContractSerializer : DataContractSerializer
    {

        public ArrayOfLoanStateCompositeTypeDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public ArrayOfLoanStateCompositeTypeDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public override object ReadObject(XmlReader reader)
        {
            ArrayOfLoanStateCompositeType ArrayOfLoanStateCompositeTypeField = null;
            if (IsParentStartElement(reader, false, true))
            {
                ArrayOfLoanStateCompositeTypeField = new ArrayOfLoanStateCompositeType();
                reader.Read();
                LoanStateCompositeTypeDataContractSerializer LoanStateCompositeTypeDCS = new LoanStateCompositeTypeDataContractSerializer("LoanStateCompositeType", "http://schemas.datacontract.org/2004/07/", "http://schemas.datacontract.org/2004/07/");
                System.Collections.ArrayList LoanStateCompositeType_List = new System.Collections.ArrayList();
                for (int i = 0; (i > -1); i = (i + 1))
                {
                    if (!IsChildStartElement(reader, "LoanStateCompositeType", false, false))
                    {
                        ArrayOfLoanStateCompositeTypeField.LoanStateCompositeType = new LoanStateCompositeType[LoanStateCompositeType_List.Count];
                        LoanStateCompositeType_List.CopyTo(ArrayOfLoanStateCompositeTypeField.LoanStateCompositeType);
                        break;
                    }
                    LoanStateCompositeType_List.Add(((LoanStateCompositeType)(LoanStateCompositeTypeDCS.ReadObject(reader))));
                }
                reader.ReadEndElement();
            }
            return ArrayOfLoanStateCompositeTypeField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            ArrayOfLoanStateCompositeType ArrayOfLoanStateCompositeTypeField = ((ArrayOfLoanStateCompositeType)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                LoanStateCompositeTypeDataContractSerializer LoanStateCompositeTypeDCS = new LoanStateCompositeTypeDataContractSerializer("LoanStateCompositeType", "http://schemas.datacontract.org/2004/07/", "http://schemas.datacontract.org/2004/07/");
                for (int i = 0; (i < ArrayOfLoanStateCompositeTypeField.LoanStateCompositeType.Length); i = (i + 1))
                {
                    LoanStateCompositeTypeDCS.WriteObject(writer, ArrayOfLoanStateCompositeTypeField.LoanStateCompositeType[i]);
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
namespace schemas.microsoft.com.Serialization.Arrays
{


    [DataContract(Namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public class ArrayOfstring
    {

        [DataMember(Order = 0, IsNillable = true, IsRequired = false)]
        public string[] STRING;
    }

    public class ArrayOfstringDataContractSerializer : DataContractSerializer
    {

        public ArrayOfstringDataContractSerializer(string rootName, string rootNameSpace) :
            base(rootName, rootNameSpace)
        {
        }

        public ArrayOfstringDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) :
            base(rootName, rootNameSpace, localNameSpace)
        {
        }

        public string ReadString(XmlReader reader)
        {
            reader.Read();
            string s = reader.ReadString();
            reader.ReadEndElement();
            return s;
        }

        public override object ReadObject(XmlReader reader)
        {
            ArrayOfstring ArrayOfstringField = null;
            if (IsParentStartElement(reader, false, true))
            {
                ArrayOfstringField = new ArrayOfstring();
                reader.Read();

                System.Collections.ArrayList string_List = new System.Collections.ArrayList();
                for (int i = 0; (i > -1); i = (i + 1))
                {
                    if (!IsChildStartElement(reader, "string", false, false))
                    {
                        ArrayOfstringField.STRING = new string[string_List.Count];
                        string_List.CopyTo(ArrayOfstringField.STRING);
                        break;
                    }
                    string_List.Add(ReadString(reader));
                }
                reader.ReadEndElement();
            }
            return ArrayOfstringField;
        }

        public override void WriteObject(XmlWriter writer, object graph)
        {
            ArrayOfstring ArrayOfstringField = ((ArrayOfstring)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "string", true, false, ArrayOfstringField.STRING))
                {
                    writer.WriteString(ArrayOfstringField.STRING.ToString());
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
